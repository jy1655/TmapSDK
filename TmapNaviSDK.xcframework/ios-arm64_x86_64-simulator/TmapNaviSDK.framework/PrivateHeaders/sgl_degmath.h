#ifndef _DEGMATH_H_
#define _DEGMATH_H_

/*
* degree를 표현한다.
*/

#ifndef WORLDCOORD_PER_DEG
#define WORLDCOORD_PER_DEG	(256 * 2048.0) // WGS84 좌표에 WORLDCOORD_PER_DEG를 곱하면 World좌표가 된다.
#endif
#define WORLDCOORD_PER_DEG_INT	524288 // WGS84 좌표에 WORLDCOORD_PER_DEG를 곱하면 World좌표가 된다.

#define METER_PER_WORLDX				0.1698f
#define METER_PER_WORLDY				0.2116f

#define WORLD_TO_REAL_RATIO				1.24617196702f
#ifndef SQR
#define SQR(x)	((x) * (x))
#endif
#ifndef INNER
#define INNER(x1,y1,x2,y2) ((x1) * (x2) + (y1) * (y2))
#endif

#define CMMATH_PI				3.1415926409f
#define CMMATH_HALF_PI			1.57079632045f
#define CMMATH_30_RAD			0.52359877348333333333333333333333f			//60도에 해당하는 라디안 값
#define	RAD_2_DEG(r)			(r)*180.f/CMMATH_PI
#define	DEG_2_RAD(r)			(r)*CMMATH_PI/180.f

/*
* degSin, degCos, degAtan2를 위한 table을 generate
*/
void initDegreeMathLib(void);

/*
* 각도를 0 ~ 359도로 나타낸다.
*/
Int32 dgree(Int32 d);

Float dgreeF(Float fAngle);

Int32 degNormalize(Int32);

/*
* 두 각도의 차를 구한다.
* angle1 : 0 ~ 359
* angle2 : 0 ~ 359
* return : 0 ~ 180
*/
Int32 degDiff(Int32 angle1, Int32 angle2);

/*
* degree에대한 sin값
*/
double degSin(Int32);

/*
* degree에대한 cos값
*/
double degCos(Int32);

Int32 GetSinValue(Int32 nWidth, Int32 angle);

Int32 GetCosValue(Int32 nWidth, Int32 angle);
float GetSinRealValue(float nWidth, Int32 angle);
float GetCosRealValue(float nWidth, Int32 angle);

/*
* arc tangent값 0 ~ 359
*/
Int32 degAtan2(Int32 y, Int32 x);

double mpow(double base, Int32 exp);
// 반지름 구하기
UInt16 getRadius(DOUBLE_VERTEX start, DOUBLE_VERTEX end);

//* 개요: 주어진 점(postx,posty)로부턴 Line((lin1x,line1y),(Line2x,line2y))까지의 SQR거리를 구한다.
//* 리턴: SQR 거리 
//* out extrainfo  0: 시작점과의 거리, 1: 끝점과의 거리, 2: 선분내부 
double GetSqrDistance(double postx,double posty,double line1x,double line1y,
					  double line2x,double line2y, Int32 *extrainfo);


Int32 GetMeterPerWorldX(int StartY, int EndY);

Int32 GetMeterPerWorldY(int StartY, int EndY);

Int GetParallelLine(Int x0, Int y0, Int x1, Int y1, Int width, Bool isLeft,OUT Int *pX,OUT Int *pY);

Int GetLineToGonBuffer(Int x0, Int y0, Int x1, Int y1, Int width,OUT Int *pX,OUT Int *pY);

Int GetLineToArrowGonBuffer(Int x0, Int y0, Int x1, Int y1, Int width, Int nAngle, Int *pX, Int *pY);


// [Yeon-2008.1.20] 
// 아래 월드좌표의 미터비는 실제 양수를 사용하기 위해서 10000.를 곱해 놓았다.
// 위도별 METER/WORLDX 값 데이터
// **경도를 고려하지 않는 이유는 위도에 따라 거리차가 생기기 때문

// 위도별 METER/WORLDX 값 데이터
// **경도를 고려하지 않는 이유는 위도에 따라 거리차가 생기기 때문
static const Int32 Meter_PER_World_X[] = {
	2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124, 2123, 2123, // 0~9
	2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123, // 1~1.9
	2122, 2122, 2122, 2122, 2122, 2122, 2122, 2121, 2121, 2121, // 2~2.9
	2121, 2121, 2120, 2120, 2120, 2120, 2120, 2119, 2119, 2119, // 3~3.9
	2119, 2118, 2118, 2118, 2117, 2117, 2117, 2117, 2116, 2116, // 4~4.9
	2116, 2115, 2115, 2115, 2114, 2114, 2114, 2113, 2113, 2113, // 5~5.9
	2112, 2112, 2111, 2111, 2111, 2110, 2110, 2109, 2109, 2108, // 6~6.9
	2108, 2108, 2107, 2107, 2106, 2106, 2105, 2105, 2104, 2104, // 7~7.9
	2103, 2103, 2102, 2102, 2101, 2100, 2100, 2099, 2099, 2098, // 8~8.9
	2098, 2097, 2097, 2096, 2095, 2095, 2094, 2094, 2093, 2092, // 9~9.9
	2092, 2091, 2090, 2090, 2089, 2088, 2088, 2087, 2086, 2086, // 10~10.9
	2085, 2084, 2083, 2083, 2082, 2081, 2081, 2080, 2079, 2078, // 11~11.9
	2078, 2077, 2076, 2075, 2074, 2074, 2073, 2072, 2071, 2070, // 12~12.9
	2070, 2069, 2068, 2067, 2066, 2065, 2064, 2064, 2063, 2062, // 13~13.9
	2061, 2060, 2059, 2058, 2057, 2056, 2055, 2055, 2054, 2053, // 14~14.9
	2052, 2051, 2050, 2049, 2048, 2047, 2046, 2045, 2044, 2043, // 15~15.9
	2042, 2041, 2040, 2039, 2038, 2037, 2036, 2035, 2034, 2032, // 16~16.9
	2031, 2030, 2029, 2028, 2027, 2026, 2025, 2024, 2023, 2021, // 17~17.9
	2020, 2019, 2018, 2017, 2016, 2015, 2013, 2012, 2011, 2010, // 18~18.9
	2009, 2007, 2006, 2005, 2004, 2002, 2001, 2000, 1999, 1998, // 19~19.9
	1996, 1995, 1994, 1992, 1991, 1990, 1989, 1987, 1986, 1985, // 20~20.9
	1983, 1982, 1981, 1979, 1978, 1977, 1975, 1974, 1973, 1971, // 21~21.9
	1970, 1968, 1967, 1966, 1964, 1963, 1961, 1960, 1959, 1957, // 22~22.9
	1956, 1954, 1953, 1951, 1950, 1948, 1947, 1945, 1944, 1942, // 23~23.9
	1941, 1939, 1938, 1936, 1935, 1933, 1932, 1930, 1929, 1927, // 24~24.9
	1926, 1924, 1923, 1921, 1919, 1918, 1916, 1915, 1913, 1911, // 25~25.9
	1910, 1908, 1907, 1905, 1903, 1902, 1900, 1898, 1897, 1895, // 26~26.9
	1893, 1892, 1890, 1888, 1887, 1885, 1883, 1881, 1880, 1878, // 27~27.9
	1876, 1875, 1873, 1871, 1869, 1868, 1866, 1864, 1862, 1860, // 28~28.9
	1859, 1857, 1855, 1853, 1851, 1850, 1848, 1846, 1844, 1842, // 29~29.9
	1840, 1839, 1837, 1835, 1833, 1831, 1829, 1827, 1825, 1824, // 30~30.9
	1822, 1820, 1818, 1816, 1814, 1812, 1810, 1808, 1806, 1804, // 31~31.9
	1802, 1800, 1798, 1796, 1795, 1793, 1791, 1789, 1787, 1785, // 32~32.9
	1783, 1781, 1778, 1776, 1774, 1772, 1770, 1768, 1766, 1764, // 33~33.9
	1762, 1760, 1758, 1756, 1754, 1752, 1750, 1748, 1745, 1743, // 34~34.9
	1741, 1739, 1737, 1735, 1733, 1731, 1728, 1726, 1724, 1722, // 35~35.9
	1720, 1718, 1715, 1713, 1711, 1709, 1707, 1704, 1702, 1700, // 36~36.9
	1698, 1696, 1693, 1691, 1689, 1687, 1684, 1682, 1680, 1678, // 37~37.9
	1675, 1673, 1671, 1668, 1666, 1664, 1661, 1659, 1657, 1655, // 38~38.9
	1652, 1650, 1648, 1645, 1643, 1641, 1638, 1636, 1633, 1631, // 39~39.9
	1629, 1626, 1624, 1622, 1619, 1617, 1614, 1612, 1610, 1607, // 40~40.9
	1605, 1602, 1600, 1597, 1595, 1592, 1590, 1588, 1585, 1583, // 41~41.9
	1580, 1578, 1575, 1573, 1570, 1568, 1565, 1563, 1560, 1558, // 42~42.9
	1555, 1553, 1550, 1548, 1545, 1542, 1540, 1537, 1535, 1532, // 43~43.9
	1530, 1527, 1525, 1522, 1519, 1517, 1514, 1512, 1509, 1506, // 44~44.9
	1504, 1501, 1498, 1496, 1493, 1491, 1488, 1485, 1483, 1480, // 45~45.9
	1477, 1475, 1472, 1469, 1467, 1464, 1461, 1459, 1456, 1453, // 46~46.9
	1450, 1448, 1445, 1442, 1440, 1437, 1434, 1431, 1429, 1426, // 47~47.9
	1423, 1420, 1418, 1415, 1412, 1409, 1407, 1404, 1401, 1398, // 48~48.9
	1395, 1393, 1390, 1387, 1384, 1381, 1379, 1376, 1373, 1370, // 49~49.9
	1367, 1364, 1362, 1359, 1356, 1353, 1350, 1347, 1344, 1342, // 50~50.9
	1339, 1336, 1333, 1330, 1327, 1324, 1321, 1318, 1316, 1313, // 51~51.9
	1310, 1307, 1304, 1301, 1298, 1295, 1292, 1289, 1286, 1283, // 52~52.9
	1280, 1277, 1274, 1271, 1268, 1265, 1262, 1259, 1257, 1254, // 53~53.9
	1251, 1248, 1245, 1242, 1238, 1235, 1232, 1229, 1226, 1223, // 54~54.9
	1220, 1217, 1214, 1211, 1208, 1205, 1202, 1199, 1196, 1193, // 55~55.9
	1190, 1187, 1184, 1181, 1177, 1174, 1171, 1168, 1165, 1162, // 56~56.9
	1159, 1156, 1153, 1150, 1146, 1143, 1140, 1137, 1134, 1131, // 57~57.9
	1128, 1124, 1121, 1118, 1115, 1112, 1109, 1106, 1102, 1099, // 58~58.9
	1096, 1093, 1090, 1086, 1083, 1080, 1077, 1074, 1070, 1067, // 59~59.9
	1064, 1061, 1058, 1054, 1051, 1048, 1045, 1041, 1038, 1035, // 60~60.9
	1032, 1029, 1025, 1022, 1019, 1015, 1012, 1009, 1006, 1002, // 61~61.9
	999,  996,  993,  989,  986,  983,  979,  976,  973,  970, // 62~62.9
	966,  963,  960,  956,  953,  950,  946,  943,  940,  936, // 63~63.9
	933,  930,  926,  923,  920,  916,  913,  910,  906,  903, // 64~64.9
	900,  896,  893,  889,  886,  883,  879,  876,  873,  869, // 65~65.9
	866,  862,  859,  856,  852,  849,  845,  842,  839,  835, // 66~66.9
	832,  828,  825,  821,  818,  815,  811,  808,  804,  801, // 67~67.9
	797,  794,  791,  787,  784,  780,  777,  773,  770,  766, // 68~68.9
	763,  759,  756,  752,  749,  746,  742,  739,  735,  732, // 69~69.9
	728,  725,  721,  718,  714,  711,  707,  704,  700,  697, // 70~70.9
	693,  690,  686,  683,  679,  676,  672,  668,  665,  661, // 71~71.9
	658,  654,  651,  647,  644,  640,  637,  633,  630,  626, // 72~72.9
	622,  619,  615,  612,  608,  605,  601,  598,  594,  590, // 73~73.9
	587,  583,  580,  576,  573,  569,  565,  562,  558,  555, // 74~74.9
	551,  547,  544,  540,  537,  533,  530,  526,  522,  519, // 75~75.9
	515,  511,  508,  504,  501,  497,  493,  490,  486,  483, // 76~76.9
	479,  475,  472,  468,  464,  461,  457,  454,  450,  446, // 77~77.9
	443,  439,  435,  432,  428,  425,  421,  417,  414,  410, // 78~78.9
	406,  403,  399,  395,  392,  388,  384,  381,  377,  373, // 79~79.9
	370,  366,  362,  359,  355,  351,  348,  344,  340,  337, // 80~80.9
	333,  329,  326,  322,  318,  315,  311,  307,  304,  300, // 81~81.9
	296,  293,  289,  285,  282,  278,  274,  271,  267,  263, // 82~82.9
	260,  256,  252,  248,  245,  241,  237,  234,  230,  226, // 83~83.9
	223,  219,  215,  211,  208,  204,  200,  197,  193,  189, // 84~84.9
	186,  182,  178,  174,  171,  167,  163,  160,  156,  152, // 85~85.9
	149,  145,  141,  137,  134,  130,  126,  123,  119,  115, // 86~86.9
	111,  108,  104,  100,   97,   93,   89,   85,   82,   78, // 87~87.9
	74,   71,   67,   63,   59,   56,   52,   48,   45,   41, // 88~88.9
	37,   33,   30,   26,   22,   19,   15,   11,    7,    4 // 89~89.9
};

// 위도별 METER/WORLDY 값 데이터
static const Int32 Meter_PER_World_Y[] = {
	2109, 2109, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, //0~9
	2110, 2110, 2110, 2110, 2111, 2111, 2111, 2111, 2111, 2112, //10~19
	2112, 2112, 2112, 2113, 2113, 2113, 2113, 2114, 2114, 2114, //20~29
	2114, 2115, 2115, 2115, 2116, 2116, 2116, 2117, 2117, 2117, //30~39
	2118, 2118, 2118, 2119, 2119, 2119, 2120, 2120, 2121, 2121, //40~49
	2121, 2122, 2122, 2122, 2123, 2123, 2123, 2124, 2124, 2124, //50~59
	2124, 2125, 2125, 2125, 2126, 2126, 2126, 2126, 2127, 2127, //60~69
	2127, 2127, 2128, 2128, 2128, 2128, 2128, 2129, 2129, 2129, //70~79
	2129, 2129, 2129, 2129, 2129, 2129, 2129, 2129, 2130, 2130  //80~89
};

#ifdef __cplusplus
template< class T>
inline void sgl_InflateLine(T& ptStart, T& ptEnd, Float fScale)
{
	T	uFF, uBW;
	uFF.x = (ptStart.x - ptEnd.x);
	uFF.y = (ptStart.y - ptEnd.y);
	uBW.x = (ptEnd.x - ptStart.x);
	uBW.y = (ptEnd.y - ptStart.y);
	ptEnd.x		+= uFF.x * fScale;
	ptEnd.y		+= uFF.y * fScale;
	ptStart.x	+= uBW.x * fScale;
	ptStart.y	+= uBW.y * fScale;
}
template< class T>
inline Bool sgl_GetCrossPoint( T& AP1, T& AP2, T& BP1, T& BP2, T* IP)
{
	double t;
	double s; 
	double under = (BP2.y-BP1.y)*(AP2.x-AP1.x)-(BP2.x-BP1.x)*(AP2.y-AP1.y);
	if(under==0) 
		return FALSE;
	double _t = (BP2.x-BP1.x)*(AP1.y-BP1.y) - (BP2.y-BP1.y)*(AP1.x-BP1.x);
	double _s = (AP2.x-AP1.x)*(AP1.y-BP1.y) - (AP2.y-AP1.y)*(AP1.x-BP1.x); 
	t = _t/under;
	s = _s/under; 
	if(t<0.0 || t>1.0 || s<0.0 || s>1.0) 
		return FALSE;
	if(_t==0 && _s==0) 
		return FALSE; 
	IP->x = AP1.x + (float)t * (AP2.x-AP1.x);
	IP->y = AP1.y + (float)t * (AP2.y-AP1.y);
	return TRUE;
};
template< class T>
inline static void sgl_GetParallelLine(	T& a1, T& a2, float width, Bool isLeft, T* pr1, T* pr2)
{
	float wx, wy;
	Int32 angle;
	angle = degAtan2((Int32)(a1.y-a2.y), (Int32)(a1.x-a2.x));
	if (isLeft == TRUE) {
		angle = angle - 90;
	} else{
		angle = angle + 90;
	}
	wx = GetCosRealValue(width, angle);
	wy = GetSinRealValue(width, angle);
	pr1->x	= a1.x + wx; 
	pr1->y	= a1.y + wy;
	pr2->x	= a2.x + wx; 
	pr2->y	= a2.y + wy;
}
#endif //__cplusplus
#endif /* _DEGMATH_H_ */
